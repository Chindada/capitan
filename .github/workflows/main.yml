name: CAPITAN DOCKER CI

on:
  push:
    branches:
      - v[0-9]+.[0-9]+
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

permissions:
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME_BASE: ""
  SRV_PLATFORM_PAIR: ""

  GO_VERSION: "1.24.3"
  WEB_VERSION: ""

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      SRV_WEB_VERSION: ${{ steps.test-output.outputs.SRV_WEB_VERSION }}
    steps:
      - name: set local env
        id: test-output
        run: |
          if [[ -z "${{ env.WEB_VERSION }}" ]]; then
            echo "SRV_WEB_VERSION=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "SRV_WEB_VERSION=${{ env.WEB_VERSION }}" >> $GITHUB_OUTPUT
          fi
      - name: Checkout
        uses: actions/checkout@v4
      - name: setup golang
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: go test
        run: |
          git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"
          touch internal/version/core.json
          touch internal/version/fronted.json
          go install github.com/magefile/mage@latest
          mage test

  build_srv:
    runs-on: ubuntu-latest
    needs:
      - test
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: set lower case owner name
        run: |
          echo "IMAGE_NAME_BASE=ghcr.io/${OWNER,,}/${{ github.event.repository.name }}" >>$GITHUB_ENV
        env:
          OWNER: ${{ github.repository_owner }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to the github registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Setup golang
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Copy dist file from ghcr.io/chindada/sequoia
        run: |
          docker pull ghcr.io/chindada/sequoia:${{ needs.test.outputs.SRV_WEB_VERSION }}
          mkdir -p dist
          docker run --rm \
              -v $(pwd)/dist:/app \
              ghcr.io/chindada/sequoia:${{ needs.test.outputs.SRV_WEB_VERSION }} \
              cp -r /usr/share/sequoia/dist/. /app
          docker run --rm \
              -v $(pwd)/dist:/app \
              ghcr.io/chindada/sequoia:${{ needs.test.outputs.SRV_WEB_VERSION }} \
              cp /usr/share/sequoia/version.json /app
      - name: Prepare
        run: |
          git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"
          go install github.com/magefile/mage@latest

          mv dist/version.json internal/version/fronted.json
          echo "{" > internal/version/core.json
          echo "  \"version\": \"${{ github.ref_name }}\"," >> internal/version/core.json
          echo "  \"commit\": \"${{ github.sha }}\"" >> internal/version/core.json
          echo "}" >> internal/version/core.json

          platform=${{ matrix.platform }}
          echo "SRV_PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          if [[ $platform == "linux/amd64" ]]; then
            mage prod linux amd64 build
          elif [[ $platform == "linux/arm64" ]]; then
            mage prod linux arm64 build
          fi
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME_BASE }}
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        timeout-minutes: 60
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,"name=${{ env.IMAGE_NAME_BASE }}",push-by-digest=true,name-canonical=true,push=true
          file: ./docker/capitan.dockerfile
      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: srv-digests-${{ env.SRV_PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge_srv:
    runs-on: ubuntu-latest
    needs:
      - build_srv
    steps:
      - name: set lower case owner name
        run: |
          echo "IMAGE_NAME_BASE=ghcr.io/${OWNER,,}/${{ github.event.repository.name }}" >>$GITHUB_ENV
        env:
          OWNER: ${{ github.repository_owner }}
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: srv-digests-*
          merge-multiple: true
      - name: Login to the github registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME_BASE }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
          flavor: |
            latest=false
      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE_NAME_BASE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME_BASE }}:${{ steps.meta.outputs.version }}
