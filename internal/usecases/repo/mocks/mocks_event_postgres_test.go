// Code generated by MockGen. DO NOT EDIT.
// Source: event_postgres.go
//
// Generated by this command:
//
//	mockgen -source=event_postgres.go -destination=./mocks/mocks_event_postgres_test.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/chindada/panther/golang/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockEventRepo is a mock of EventRepo interface.
type MockEventRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepoMockRecorder
	isgomock struct{}
}

// MockEventRepoMockRecorder is the mock recorder for MockEventRepo.
type MockEventRepoMockRecorder struct {
	mock *MockEventRepo
}

// NewMockEventRepo creates a new mock instance.
func NewMockEventRepo(ctrl *gomock.Controller) *MockEventRepo {
	mock := &MockEventRepo{ctrl: ctrl}
	mock.recorder = &MockEventRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepo) EXPECT() *MockEventRepoMockRecorder {
	return m.recorder
}

// InsertLoginEvent mocks base method.
func (m *MockEventRepo) InsertLoginEvent(ctx context.Context, events []*pb.LoginEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLoginEvent", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLoginEvent indicates an expected call of InsertLoginEvent.
func (mr *MockEventRepoMockRecorder) InsertLoginEvent(ctx, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLoginEvent", reflect.TypeOf((*MockEventRepo)(nil).InsertLoginEvent), ctx, events)
}

// InsertShioajiEvent mocks base method.
func (m *MockEventRepo) InsertShioajiEvent(ctx context.Context, event *pb.ShioajiEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertShioajiEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertShioajiEvent indicates an expected call of InsertShioajiEvent.
func (mr *MockEventRepoMockRecorder) InsertShioajiEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertShioajiEvent", reflect.TypeOf((*MockEventRepo)(nil).InsertShioajiEvent), ctx, event)
}

// SelectLoginEvent mocks base method.
func (m *MockEventRepo) SelectLoginEvent(ctx context.Context, limit int64) ([]*pb.LoginEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectLoginEvent", ctx, limit)
	ret0, _ := ret[0].([]*pb.LoginEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectLoginEvent indicates an expected call of SelectLoginEvent.
func (mr *MockEventRepoMockRecorder) SelectLoginEvent(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectLoginEvent", reflect.TypeOf((*MockEventRepo)(nil).SelectLoginEvent), ctx, limit)
}

// SelectShioajiEvent mocks base method.
func (m *MockEventRepo) SelectShioajiEvent(ctx context.Context) ([]*pb.ShioajiEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectShioajiEvent", ctx)
	ret0, _ := ret[0].([]*pb.ShioajiEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectShioajiEvent indicates an expected call of SelectShioajiEvent.
func (mr *MockEventRepoMockRecorder) SelectShioajiEvent(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectShioajiEvent", reflect.TypeOf((*MockEventRepo)(nil).SelectShioajiEvent), ctx)
}
