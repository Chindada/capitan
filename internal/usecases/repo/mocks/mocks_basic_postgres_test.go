// Code generated by MockGen. DO NOT EDIT.
// Source: basic_postgres.go
//
// Generated by this command:
//
//	mockgen -source=basic_postgres.go -destination=./mocks/mocks_basic_postgres_test.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/chindada/panther/golang/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockBasicRepo is a mock of BasicRepo interface.
type MockBasicRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBasicRepoMockRecorder
	isgomock struct{}
}

// MockBasicRepoMockRecorder is the mock recorder for MockBasicRepo.
type MockBasicRepoMockRecorder struct {
	mock *MockBasicRepo
}

// NewMockBasicRepo creates a new mock instance.
func NewMockBasicRepo(ctrl *gomock.Controller) *MockBasicRepo {
	mock := &MockBasicRepo{ctrl: ctrl}
	mock.recorder = &MockBasicRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicRepo) EXPECT() *MockBasicRepoMockRecorder {
	return m.recorder
}

// InsertFutureDetail mocks base method.
func (m *MockBasicRepo) InsertFutureDetail(ctx context.Context, t []*pb.FutureDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFutureDetail", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFutureDetail indicates an expected call of InsertFutureDetail.
func (mr *MockBasicRepoMockRecorder) InsertFutureDetail(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFutureDetail", reflect.TypeOf((*MockBasicRepo)(nil).InsertFutureDetail), ctx, t)
}

// InsertOptionDetail mocks base method.
func (m *MockBasicRepo) InsertOptionDetail(ctx context.Context, t []*pb.OptionDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOptionDetail", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOptionDetail indicates an expected call of InsertOptionDetail.
func (mr *MockBasicRepoMockRecorder) InsertOptionDetail(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOptionDetail", reflect.TypeOf((*MockBasicRepo)(nil).InsertOptionDetail), ctx, t)
}

// InsertStockDetail mocks base method.
func (m *MockBasicRepo) InsertStockDetail(ctx context.Context, t []*pb.StockDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStockDetail", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertStockDetail indicates an expected call of InsertStockDetail.
func (mr *MockBasicRepoMockRecorder) InsertStockDetail(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStockDetail", reflect.TypeOf((*MockBasicRepo)(nil).InsertStockDetail), ctx, t)
}

// SearchFutureDetail mocks base method.
func (m *MockBasicRepo) SearchFutureDetail(ctx context.Context, code string) ([]*pb.FutureDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFutureDetail", ctx, code)
	ret0, _ := ret[0].([]*pb.FutureDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFutureDetail indicates an expected call of SearchFutureDetail.
func (mr *MockBasicRepoMockRecorder) SearchFutureDetail(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFutureDetail", reflect.TypeOf((*MockBasicRepo)(nil).SearchFutureDetail), ctx, code)
}

// SelectAllFutureDetail mocks base method.
func (m *MockBasicRepo) SelectAllFutureDetail(ctx context.Context) ([]*pb.FutureDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFutureDetail", ctx)
	ret0, _ := ret[0].([]*pb.FutureDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFutureDetail indicates an expected call of SelectAllFutureDetail.
func (mr *MockBasicRepoMockRecorder) SelectAllFutureDetail(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFutureDetail", reflect.TypeOf((*MockBasicRepo)(nil).SelectAllFutureDetail), ctx)
}

// SelectAllOptionDetail mocks base method.
func (m *MockBasicRepo) SelectAllOptionDetail(ctx context.Context) ([]*pb.OptionDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllOptionDetail", ctx)
	ret0, _ := ret[0].([]*pb.OptionDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllOptionDetail indicates an expected call of SelectAllOptionDetail.
func (mr *MockBasicRepoMockRecorder) SelectAllOptionDetail(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllOptionDetail", reflect.TypeOf((*MockBasicRepo)(nil).SelectAllOptionDetail), ctx)
}

// SelectAllStockDetail mocks base method.
func (m *MockBasicRepo) SelectAllStockDetail(ctx context.Context) ([]*pb.StockDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllStockDetail", ctx)
	ret0, _ := ret[0].([]*pb.StockDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllStockDetail indicates an expected call of SelectAllStockDetail.
func (mr *MockBasicRepoMockRecorder) SelectAllStockDetail(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllStockDetail", reflect.TypeOf((*MockBasicRepo)(nil).SelectAllStockDetail), ctx)
}
