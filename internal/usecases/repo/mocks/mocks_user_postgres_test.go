// Code generated by MockGen. DO NOT EDIT.
// Source: user_postgres.go
//
// Generated by this command:
//
//	mockgen -source=user_postgres.go -destination=./mocks/mocks_user_postgres_test.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/chindada/panther/golang/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
	isgomock struct{}
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// ActivateUserTotp mocks base method.
func (m *MockUserRepo) ActivateUserTotp(ctx context.Context, t *pb.User, totp *pb.Totp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUserTotp", ctx, t, totp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUserTotp indicates an expected call of ActivateUserTotp.
func (mr *MockUserRepoMockRecorder) ActivateUserTotp(ctx, t, totp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUserTotp", reflect.TypeOf((*MockUserRepo)(nil).ActivateUserTotp), ctx, t, totp)
}

// DeleteUser mocks base method.
func (m *MockUserRepo) DeleteUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepoMockRecorder) DeleteUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepo)(nil).DeleteUser), ctx, username)
}

// InsertUser mocks base method.
func (m *MockUserRepo) InsertUser(ctx context.Context, t *pb.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserRepoMockRecorder) InsertUser(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepo)(nil).InsertUser), ctx, t)
}

// SelectAllUser mocks base method.
func (m *MockUserRepo) SelectAllUser(ctx context.Context) (*pb.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllUser", ctx)
	ret0, _ := ret[0].(*pb.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllUser indicates an expected call of SelectAllUser.
func (mr *MockUserRepoMockRecorder) SelectAllUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllUser", reflect.TypeOf((*MockUserRepo)(nil).SelectAllUser), ctx)
}

// SelectTotpByID mocks base method.
func (m *MockUserRepo) SelectTotpByID(ctx context.Context, id int64) (*pb.Totp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTotpByID", ctx, id)
	ret0, _ := ret[0].(*pb.Totp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTotpByID indicates an expected call of SelectTotpByID.
func (mr *MockUserRepoMockRecorder) SelectTotpByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTotpByID", reflect.TypeOf((*MockUserRepo)(nil).SelectTotpByID), ctx, id)
}

// SelectUserByID mocks base method.
func (m *MockUserRepo) SelectUserByID(ctx context.Context, id int64) (*pb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByID", ctx, id)
	ret0, _ := ret[0].(*pb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByID indicates an expected call of SelectUserByID.
func (mr *MockUserRepoMockRecorder) SelectUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByID", reflect.TypeOf((*MockUserRepo)(nil).SelectUserByID), ctx, id)
}

// SelectUserByUsername mocks base method.
func (m *MockUserRepo) SelectUserByUsername(ctx context.Context, username string) (*pb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByUsername", ctx, username)
	ret0, _ := ret[0].(*pb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByUsername indicates an expected call of SelectUserByUsername.
func (mr *MockUserRepoMockRecorder) SelectUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByUsername", reflect.TypeOf((*MockUserRepo)(nil).SelectUserByUsername), ctx, username)
}

// SelectUserIDByUsername mocks base method.
func (m *MockUserRepo) SelectUserIDByUsername(ctx context.Context, username string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserIDByUsername", ctx, username)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserIDByUsername indicates an expected call of SelectUserIDByUsername.
func (mr *MockUserRepoMockRecorder) SelectUserIDByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserIDByUsername", reflect.TypeOf((*MockUserRepo)(nil).SelectUserIDByUsername), ctx, username)
}

// UpdateUser mocks base method.
func (m *MockUserRepo) UpdateUser(ctx context.Context, t *pb.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepoMockRecorder) UpdateUser(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUser), ctx, t)
}

// UpdateUserPassword mocks base method.
func (m *MockUserRepo) UpdateUserPassword(ctx context.Context, t *pb.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserRepoMockRecorder) UpdateUserPassword(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserRepo)(nil).UpdateUserPassword), ctx, t)
}
