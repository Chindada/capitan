// Code generated by MockGen. DO NOT EDIT.
// Source: usecase_system.go
//
// Generated by this command:
//
//	mockgen -source=usecase_system.go -destination=./mocks/mocks_usecase_system_test.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/chindada/panther/golang/pb"
	gin "github.com/gin-gonic/gin"
	otp "github.com/pquerna/otp"
	gomock "go.uber.org/mock/gomock"
)

// MockSystem is a mock of System interface.
type MockSystem struct {
	ctrl     *gomock.Controller
	recorder *MockSystemMockRecorder
	isgomock struct{}
}

// MockSystemMockRecorder is the mock recorder for MockSystem.
type MockSystemMockRecorder struct {
	mock *MockSystem
}

// NewMockSystem creates a new mock instance.
func NewMockSystem(ctrl *gomock.Controller) *MockSystem {
	mock := &MockSystem{ctrl: ctrl}
	mock.recorder = &MockSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystem) EXPECT() *MockSystemMockRecorder {
	return m.recorder
}

// AddTotpByUser mocks base method.
func (m *MockSystem) AddTotpByUser(ctx context.Context, username string, totp *pb.Totp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTotpByUser", ctx, username, totp)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTotpByUser indicates an expected call of AddTotpByUser.
func (mr *MockSystemMockRecorder) AddTotpByUser(ctx, username, totp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTotpByUser", reflect.TypeOf((*MockSystem)(nil).AddTotpByUser), ctx, username, totp)
}

// ChangePassword mocks base method.
func (m *MockSystem) ChangePassword(ctx context.Context, username, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, username, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockSystemMockRecorder) ChangePassword(ctx, username, oldPassword, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockSystem)(nil).ChangePassword), ctx, username, oldPassword, newPassword)
}

// CreateTotp mocks base method.
func (m *MockSystem) CreateTotp(username string) (*otp.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTotp", username)
	ret0, _ := ret[0].(*otp.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTotp indicates an expected call of CreateTotp.
func (mr *MockSystemMockRecorder) CreateTotp(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTotp", reflect.TypeOf((*MockSystem)(nil).CreateTotp), username)
}

// CreateUser mocks base method.
func (m *MockSystem) CreateUser(ctx context.Context, t *pb.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockSystemMockRecorder) CreateUser(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockSystem)(nil).CreateUser), ctx, t)
}

// DeleteUser mocks base method.
func (m *MockSystem) DeleteUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockSystemMockRecorder) DeleteUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockSystem)(nil).DeleteUser), ctx, username)
}

// GetAllUser mocks base method.
func (m *MockSystem) GetAllUser(ctx context.Context) (*pb.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUser", ctx)
	ret0, _ := ret[0].(*pb.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUser indicates an expected call of GetAllUser.
func (mr *MockSystemMockRecorder) GetAllUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUser", reflect.TypeOf((*MockSystem)(nil).GetAllUser), ctx)
}

// GetLastJWT mocks base method.
func (m *MockSystem) GetLastJWT(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastJWT", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastJWT indicates an expected call of GetLastJWT.
func (mr *MockSystemMockRecorder) GetLastJWT(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastJWT", reflect.TypeOf((*MockSystem)(nil).GetLastJWT), ctx)
}

// GetUser mocks base method.
func (m *MockSystem) GetUser(ctx context.Context, username string) (*pb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, username)
	ret0, _ := ret[0].(*pb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockSystemMockRecorder) GetUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockSystem)(nil).GetUser), ctx, username)
}

// InsertJWT mocks base method.
func (m *MockSystem) InsertJWT(ctx context.Context, jwt string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertJWT", ctx, jwt)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertJWT indicates an expected call of InsertJWT.
func (mr *MockSystemMockRecorder) InsertJWT(ctx, jwt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertJWT", reflect.TypeOf((*MockSystem)(nil).InsertJWT), ctx, jwt)
}

// Login mocks base method.
func (m *MockSystem) Login(ctx *gin.Context, loginReq *pb.LoginRequest) (*pb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, loginReq)
	ret0, _ := ret[0].(*pb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockSystemMockRecorder) Login(ctx, loginReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSystem)(nil).Login), ctx, loginReq)
}

// UpdateUser mocks base method.
func (m *MockSystem) UpdateUser(ctx context.Context, t *pb.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockSystemMockRecorder) UpdateUser(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockSystem)(nil).UpdateUser), ctx, t)
}

// ValidateTotp mocks base method.
func (m *MockSystem) ValidateTotp(key, code string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTotp", key, code)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateTotp indicates an expected call of ValidateTotp.
func (mr *MockSystemMockRecorder) ValidateTotp(key, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTotp", reflect.TypeOf((*MockSystem)(nil).ValidateTotp), key, code)
}
