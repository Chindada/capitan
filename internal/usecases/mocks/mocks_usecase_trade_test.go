// Code generated by MockGen. DO NOT EDIT.
// Source: usecase_trade.go
//
// Generated by this command:
//
//	mockgen -source=usecase_trade.go -destination=./mocks/mocks_usecase_trade_test.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTrade is a mock of Trade interface.
type MockTrade struct {
	ctrl     *gomock.Controller
	recorder *MockTradeMockRecorder
	isgomock struct{}
}

// MockTradeMockRecorder is the mock recorder for MockTrade.
type MockTradeMockRecorder struct {
	mock *MockTrade
}

// NewMockTrade creates a new mock instance.
func NewMockTrade(ctrl *gomock.Controller) *MockTrade {
	mock := &MockTrade{ctrl: ctrl}
	mock.recorder = &MockTradeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrade) EXPECT() *MockTradeMockRecorder {
	return m.recorder
}

// TradeMock mocks base method.
func (m *MockTrade) TradeMock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TradeMock")
}

// TradeMock indicates an expected call of TradeMock.
func (mr *MockTradeMockRecorder) TradeMock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradeMock", reflect.TypeOf((*MockTrade)(nil).TradeMock))
}
