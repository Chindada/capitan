// Code generated by MockGen. DO NOT EDIT.
// Source: usecase_trade.go
//
// Generated by this command:
//
//	mockgen -source=usecase_trade.go -destination=./mocks/mocks_usecase_trade_test.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	pb "github.com/chindada/panther/golang/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockTrade is a mock of Trade interface.
type MockTrade struct {
	ctrl     *gomock.Controller
	recorder *MockTradeMockRecorder
	isgomock struct{}
}

// MockTradeMockRecorder is the mock recorder for MockTrade.
type MockTradeMockRecorder struct {
	mock *MockTrade
}

// NewMockTrade creates a new mock instance.
func NewMockTrade(ctrl *gomock.Controller) *MockTrade {
	mock := &MockTrade{ctrl: ctrl}
	mock.recorder = &MockTradeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrade) EXPECT() *MockTradeMockRecorder {
	return m.recorder
}

// CloseTradeClient mocks base method.
func (m *MockTrade) CloseTradeClient(clientID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseTradeClient", clientID)
}

// CloseTradeClient indicates an expected call of CloseTradeClient.
func (mr *MockTradeMockRecorder) CloseTradeClient(clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseTradeClient", reflect.TypeOf((*MockTrade)(nil).CloseTradeClient), clientID)
}

// CreateTradeClient mocks base method.
func (m *MockTrade) CreateTradeClient(clientID string, client chan *pb.Trade) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateTradeClient", clientID, client)
}

// CreateTradeClient indicates an expected call of CreateTradeClient.
func (mr *MockTradeMockRecorder) CreateTradeClient(clientID, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTradeClient", reflect.TypeOf((*MockTrade)(nil).CreateTradeClient), clientID, client)
}

// GetTradeByOrderID mocks base method.
func (m *MockTrade) GetTradeByOrderID(orderID string) (*pb.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeByOrderID", orderID)
	ret0, _ := ret[0].(*pb.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradeByOrderID indicates an expected call of GetTradeByOrderID.
func (mr *MockTradeMockRecorder) GetTradeByOrderID(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeByOrderID", reflect.TypeOf((*MockTrade)(nil).GetTradeByOrderID), orderID)
}

// GetTrades mocks base method.
func (m *MockTrade) GetTrades(req *pb.QueryTradeRequest) ([]*pb.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrades", req)
	ret0, _ := ret[0].([]*pb.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrades indicates an expected call of GetTrades.
func (mr *MockTradeMockRecorder) GetTrades(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrades", reflect.TypeOf((*MockTrade)(nil).GetTrades), req)
}

// TriggerUpdateAndPublishTrade mocks base method.
func (m *MockTrade) TriggerUpdateAndPublishTrade() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerUpdateAndPublishTrade")
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerUpdateAndPublishTrade indicates an expected call of TriggerUpdateAndPublishTrade.
func (mr *MockTradeMockRecorder) TriggerUpdateAndPublishTrade() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerUpdateAndPublishTrade", reflect.TypeOf((*MockTrade)(nil).TriggerUpdateAndPublishTrade))
}
