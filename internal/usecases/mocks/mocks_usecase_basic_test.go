// Code generated by MockGen. DO NOT EDIT.
// Source: usecase_basic.go
//
// Generated by this command:
//
//	mockgen -source=usecase_basic.go -destination=./mocks/mocks_usecase_basic_test.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/chindada/panther/golang/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockBasic is a mock of Basic interface.
type MockBasic struct {
	ctrl     *gomock.Controller
	recorder *MockBasicMockRecorder
	isgomock struct{}
}

// MockBasicMockRecorder is the mock recorder for MockBasic.
type MockBasicMockRecorder struct {
	mock *MockBasic
}

// NewMockBasic creates a new mock instance.
func NewMockBasic(ctrl *gomock.Controller) *MockBasic {
	mock := &MockBasic{ctrl: ctrl}
	mock.recorder = &MockBasicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasic) EXPECT() *MockBasicMockRecorder {
	return m.recorder
}

// GetAllStockDetail mocks base method.
func (m *MockBasic) GetAllStockDetail(ctx context.Context) (*pb.StockDetailList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockDetail", ctx)
	ret0, _ := ret[0].(*pb.StockDetailList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockDetail indicates an expected call of GetAllStockDetail.
func (mr *MockBasicMockRecorder) GetAllStockDetail(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockDetail", reflect.TypeOf((*MockBasic)(nil).GetAllStockDetail), ctx)
}
