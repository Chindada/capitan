// Code generated by MockGen. DO NOT EDIT.
// Source: usecase_basic.go
//
// Generated by this command:
//
//	mockgen -source=usecase_basic.go -destination=./mocks/mocks_usecase_basic_test.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/chindada/panther/golang/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockBasic is a mock of Basic interface.
type MockBasic struct {
	ctrl     *gomock.Controller
	recorder *MockBasicMockRecorder
	isgomock struct{}
}

// MockBasicMockRecorder is the mock recorder for MockBasic.
type MockBasicMockRecorder struct {
	mock *MockBasic
}

// NewMockBasic creates a new mock instance.
func NewMockBasic(ctrl *gomock.Controller) *MockBasic {
	mock := &MockBasic{ctrl: ctrl}
	mock.recorder = &MockBasicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasic) EXPECT() *MockBasicMockRecorder {
	return m.recorder
}

// CreateFutureContract mocks base method.
func (m *MockBasic) CreateFutureContract(ctx context.Context, t *pb.FutureContract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFutureContract", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFutureContract indicates an expected call of CreateFutureContract.
func (mr *MockBasicMockRecorder) CreateFutureContract(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFutureContract", reflect.TypeOf((*MockBasic)(nil).CreateFutureContract), ctx, t)
}

// DeleteFutureContract mocks base method.
func (m *MockBasic) DeleteFutureContract(ctx context.Context, id []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFutureContract", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFutureContract indicates an expected call of DeleteFutureContract.
func (mr *MockBasicMockRecorder) DeleteFutureContract(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFutureContract", reflect.TypeOf((*MockBasic)(nil).DeleteFutureContract), ctx, id)
}

// GetAllFutureContract mocks base method.
func (m *MockBasic) GetAllFutureContract(ctx context.Context) ([]*pb.FutureContract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFutureContract", ctx)
	ret0, _ := ret[0].([]*pb.FutureContract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFutureContract indicates an expected call of GetAllFutureContract.
func (mr *MockBasicMockRecorder) GetAllFutureContract(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFutureContract", reflect.TypeOf((*MockBasic)(nil).GetAllFutureContract), ctx)
}

// GetAllFutureDetail mocks base method.
func (m *MockBasic) GetAllFutureDetail(ctx context.Context) ([]*pb.FutureDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFutureDetail", ctx)
	ret0, _ := ret[0].([]*pb.FutureDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFutureDetail indicates an expected call of GetAllFutureDetail.
func (mr *MockBasicMockRecorder) GetAllFutureDetail(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFutureDetail", reflect.TypeOf((*MockBasic)(nil).GetAllFutureDetail), ctx)
}

// GetAllOptionDetail mocks base method.
func (m *MockBasic) GetAllOptionDetail(ctx context.Context) ([]*pb.OptionDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOptionDetail", ctx)
	ret0, _ := ret[0].([]*pb.OptionDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOptionDetail indicates an expected call of GetAllOptionDetail.
func (mr *MockBasicMockRecorder) GetAllOptionDetail(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOptionDetail", reflect.TypeOf((*MockBasic)(nil).GetAllOptionDetail), ctx)
}

// GetAllStockDetail mocks base method.
func (m *MockBasic) GetAllStockDetail(ctx context.Context) ([]*pb.StockDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockDetail", ctx)
	ret0, _ := ret[0].([]*pb.StockDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockDetail indicates an expected call of GetAllStockDetail.
func (mr *MockBasicMockRecorder) GetAllStockDetail(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockDetail", reflect.TypeOf((*MockBasic)(nil).GetAllStockDetail), ctx)
}

// GetFutureContractByID mocks base method.
func (m *MockBasic) GetFutureContractByID(ctx context.Context, id int64) (*pb.FutureContract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureContractByID", ctx, id)
	ret0, _ := ret[0].(*pb.FutureContract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureContractByID indicates an expected call of GetFutureContractByID.
func (mr *MockBasicMockRecorder) GetFutureContractByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureContractByID", reflect.TypeOf((*MockBasic)(nil).GetFutureContractByID), ctx, id)
}

// GetFutureDetailByCode mocks base method.
func (m *MockBasic) GetFutureDetailByCode(ctx context.Context, code string) (*pb.FutureDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureDetailByCode", ctx, code)
	ret0, _ := ret[0].(*pb.FutureDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureDetailByCode indicates an expected call of GetFutureDetailByCode.
func (mr *MockBasicMockRecorder) GetFutureDetailByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureDetailByCode", reflect.TypeOf((*MockBasic)(nil).GetFutureDetailByCode), ctx, code)
}

// GetFutureKbar mocks base method.
func (m *MockBasic) GetFutureKbar(ctx context.Context, req *pb.HistoryKbarRequest) (*pb.HistoryKbarList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureKbar", ctx, req)
	ret0, _ := ret[0].(*pb.HistoryKbarList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureKbar indicates an expected call of GetFutureKbar.
func (mr *MockBasicMockRecorder) GetFutureKbar(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureKbar", reflect.TypeOf((*MockBasic)(nil).GetFutureKbar), ctx, req)
}

// GetLastFutureKbar mocks base method.
func (m *MockBasic) GetLastFutureKbar(ctx context.Context, req *pb.HistoryKbarRequest) (*pb.HistoryKbarList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastFutureKbar", ctx, req)
	ret0, _ := ret[0].(*pb.HistoryKbarList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastFutureKbar indicates an expected call of GetLastFutureKbar.
func (mr *MockBasicMockRecorder) GetLastFutureKbar(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastFutureKbar", reflect.TypeOf((*MockBasic)(nil).GetLastFutureKbar), ctx, req)
}

// GetOptionDetailByCode mocks base method.
func (m *MockBasic) GetOptionDetailByCode(ctx context.Context, code string) (*pb.OptionDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptionDetailByCode", ctx, code)
	ret0, _ := ret[0].(*pb.OptionDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptionDetailByCode indicates an expected call of GetOptionDetailByCode.
func (mr *MockBasicMockRecorder) GetOptionDetailByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptionDetailByCode", reflect.TypeOf((*MockBasic)(nil).GetOptionDetailByCode), ctx, code)
}

// GetStockDetailByCode mocks base method.
func (m *MockBasic) GetStockDetailByCode(ctx context.Context, code string) (*pb.StockDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockDetailByCode", ctx, code)
	ret0, _ := ret[0].(*pb.StockDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockDetailByCode indicates an expected call of GetStockDetailByCode.
func (mr *MockBasicMockRecorder) GetStockDetailByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockDetailByCode", reflect.TypeOf((*MockBasic)(nil).GetStockDetailByCode), ctx, code)
}

// GetTargetFuture mocks base method.
func (m *MockBasic) GetTargetFuture() []*pb.FutureDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetFuture")
	ret0, _ := ret[0].([]*pb.FutureDetail)
	return ret0
}

// GetTargetFuture indicates an expected call of GetTargetFuture.
func (mr *MockBasicMockRecorder) GetTargetFuture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetFuture", reflect.TypeOf((*MockBasic)(nil).GetTargetFuture))
}

// GetTargetStock mocks base method.
func (m *MockBasic) GetTargetStock() []*pb.StockDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetStock")
	ret0, _ := ret[0].([]*pb.StockDetail)
	return ret0
}

// GetTargetStock indicates an expected call of GetTargetStock.
func (mr *MockBasicMockRecorder) GetTargetStock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetStock", reflect.TypeOf((*MockBasic)(nil).GetTargetStock))
}

// SetFutureDetailContract mocks base method.
func (m *MockBasic) SetFutureDetailContract(ctx context.Context, req *pb.UpdateFutureDetailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFutureDetailContract", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFutureDetailContract indicates an expected call of SetFutureDetailContract.
func (mr *MockBasicMockRecorder) SetFutureDetailContract(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFutureDetailContract", reflect.TypeOf((*MockBasic)(nil).SetFutureDetailContract), ctx, req)
}

// UpdateFutureContract mocks base method.
func (m *MockBasic) UpdateFutureContract(ctx context.Context, t *pb.FutureContract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFutureContract", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFutureContract indicates an expected call of UpdateFutureContract.
func (mr *MockBasicMockRecorder) UpdateFutureContract(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFutureContract", reflect.TypeOf((*MockBasic)(nil).UpdateFutureContract), ctx, t)
}
