// Code generated by MockGen. DO NOT EDIT.
// Source: usecase_stream.go
//
// Generated by this command:
//
//	mockgen -source=usecase_stream.go -destination=./mocks/mocks_usecase_stream_test.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	usecases "github.com/chindada/capitan/internal/usecases"
	gomock "go.uber.org/mock/gomock"
)

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
	isgomock struct{}
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// CloseFutureClient mocks base method.
func (m *MockStream) CloseFutureClient(clientID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseFutureClient", clientID)
}

// CloseFutureClient indicates an expected call of CloseFutureClient.
func (mr *MockStreamMockRecorder) CloseFutureClient(clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseFutureClient", reflect.TypeOf((*MockStream)(nil).CloseFutureClient), clientID)
}

// CloseSingleFutureClient mocks base method.
func (m *MockStream) CloseSingleFutureClient(clientID, code string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseSingleFutureClient", clientID, code)
}

// CloseSingleFutureClient indicates an expected call of CloseSingleFutureClient.
func (mr *MockStreamMockRecorder) CloseSingleFutureClient(clientID, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSingleFutureClient", reflect.TypeOf((*MockStream)(nil).CloseSingleFutureClient), clientID, code)
}

// CreateFutureClient mocks base method.
func (m *MockStream) CreateFutureClient(client *usecases.FutureClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateFutureClient", client)
}

// CreateFutureClient indicates an expected call of CreateFutureClient.
func (mr *MockStreamMockRecorder) CreateFutureClient(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFutureClient", reflect.TypeOf((*MockStream)(nil).CreateFutureClient), client)
}

// CreateSingleFutureClient mocks base method.
func (m *MockStream) CreateSingleFutureClient(code string, client *usecases.FutureClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateSingleFutureClient", code, client)
}

// CreateSingleFutureClient indicates an expected call of CreateSingleFutureClient.
func (mr *MockStreamMockRecorder) CreateSingleFutureClient(code, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSingleFutureClient", reflect.TypeOf((*MockStream)(nil).CreateSingleFutureClient), code, client)
}
