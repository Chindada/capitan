// Code generated by MockGen. DO NOT EDIT.
// Source: usecase_events.go
//
// Generated by this command:
//
//	mockgen -source=usecase_events.go -destination=./mocks/mocks_usecase_events_test.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	pb "github.com/chindada/panther/golang/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockEvents is a mock of Events interface.
type MockEvents struct {
	ctrl     *gomock.Controller
	recorder *MockEventsMockRecorder
	isgomock struct{}
}

// MockEventsMockRecorder is the mock recorder for MockEvents.
type MockEventsMockRecorder struct {
	mock *MockEvents
}

// NewMockEvents creates a new mock instance.
func NewMockEvents(ctrl *gomock.Controller) *MockEvents {
	mock := &MockEvents{ctrl: ctrl}
	mock.recorder = &MockEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvents) EXPECT() *MockEventsMockRecorder {
	return m.recorder
}

// GetCurrentLoginEvent mocks base method.
func (m *MockEvents) GetCurrentLoginEvent() *pb.LoginEventList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentLoginEvent")
	ret0, _ := ret[0].(*pb.LoginEventList)
	return ret0
}

// GetCurrentLoginEvent indicates an expected call of GetCurrentLoginEvent.
func (mr *MockEventsMockRecorder) GetCurrentLoginEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentLoginEvent", reflect.TypeOf((*MockEvents)(nil).GetCurrentLoginEvent))
}

// GetShioajiEvent mocks base method.
func (m *MockEvents) GetShioajiEvent() ([]*pb.ShioajiEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShioajiEvent")
	ret0, _ := ret[0].([]*pb.ShioajiEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShioajiEvent indicates an expected call of GetShioajiEvent.
func (mr *MockEventsMockRecorder) GetShioajiEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShioajiEvent", reflect.TypeOf((*MockEvents)(nil).GetShioajiEvent))
}
